- Stream流的三类方法
   + 获取Stream流
     + 创建一条流水线,并把数据放到流水线上准备进行操作
   + 中间方法
     + 流水线上的操作
     + 一次操作完毕之后,还可以继续进行其他操作
   + 终结方法
     + 一个Stream流只能有一个终结方法
     + 是流水线上的最后一个操作


- 生成Stream流的方式
  - Collection体系集合(单列集合)
    使用默认方法stream()生成流， default Stream<E>
    集合对象.stream()

  - Map体系集合(双列集合)
    把Map转成Set集合，间接的生成流
    集合对象.keySet.stream();
    集合对象.entrySet.stream();

  - 数组
    通过Arrays中的静态方法stream生成流
    Array.stream(数组名)；

  - 同种数据类型的多个数据
    通过Stream接口的静态方法of(T... values)生成流
    Stream.of(数据1，数据2，数据......)




简述单列集合、双列集合、数组分别如何获取Stream流对象，并进行演示

 1、java.util.Collection接口中加入了default方法stream()获取流对象，因此其所有实现类均可通过此方式获取流。
 2、java.util.Map接口想要获取流，先通过keySet()、values()或entrySet()方法获取键、值或键值对的单列集合，再通过stream()获取流对象。
 3、数组获取流，使用Stream接口中的的静态方法of(T...values)获取流。

 public static void main(String[] args) {
   List<String> list = new ArrayList<>();
   Stream<String> stream1 = list.stream();

   Set<String> set = new HashSet<>();
   Stream<String> stream2 = set.stream();

   Map<String, String> map = new HashMap<>();
   Stream<String> keyStream = map.keySet().stream();
   Stream<String> valueStream = map.values().stream();
   Stream<Map.Entry<String,String>>entryStream = map.entrySet().stream();

   String[] array = {"东邪", "西毒", "南帝", "北丐", "中神通"};
   Stream<String> stream = Stream.of(array);
  }





已知数组arr1中有如下元素{郭靖，杨康}，arr2中有如下元素{黄蓉，穆念慈}，使用Stream将二者合并到List集合

import java.util.stream.Stream;
public class Test {
	public static void main(String[] args) {
  		Stream<String> streamA = Stream.of("郭靖", "杨康");
		Stream<String> streamB = Stream.of("黄蓉", "穆念慈");
		List<String> strList = Stream.concat(streamA, streamB).collect(Collectors.toList());
 	}
}




