IP地址：设备的标识
端口：应用程序的标识
协议：连接和通信的规则
IP地址：是网络中设备的唯一标识
IPv4：按照TCP/IP规定，IP地址用二进制来表示，每个IP地址长32bit，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，。为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”
IPv6：采用128位地址长度，每16个字节一组，分成8组十六进制数
DOS常用命令：
- ipconfig：查看本机IP地址
- ping IP地址：检查网络是否连通

127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用


### InetAddress【应用】

InetAddress：此类表示Internet协议（IP）地址

- 相关方法

  | 方法名                                    | 说明                                                         |
  | ----------------------------------------- | ------------------------------------------------------------ |
  | static InetAddress getByName(String host) | 确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址 |
  | String getHostName()                      | 获取此IP地址的主机名                                         |
  | String getHostAddress()                   | 返回文本显示中的IP地址字符串


UDP：用户数据报协议(User Datagram Protocol)
UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。
使用UDP协议消耗系统资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输

TCP协议

- 传输控制协议 (Transmission Control Protocol)
TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。
- 在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”

- 三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠
  第一次握手，客户端向服务器端发出连接请求，等待服务器确认
  第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求
  第三次握手，客户端再次向服务器端发送确认信息，确认连接
- 完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等





### UDP发送数据【应用】

- Java中的UDP通信

  - UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念
  - Java提供了DatagramSocket类作为基于UDP协议的Socket

- 构造方法

  | 方法名                                                      | 说明                                                 |
  | ----------------------------------------------------------- | ---------------------------------------------------- |
  | DatagramSocket()                                            | 创建数据报套接字并将其绑定到本机地址上的任何可用端口 |
  | DatagramPacket(byte[] buf,int len,InetAddress add,int port) | 创建数据包,发送长度为len的数据包到指定主机的指定端口 |

- 相关方法

  | 方法名                         | 说明                   |
  | ------------------------------ | ---------------------- |
  | void send(DatagramPacket p)    | 发送数据报包           |
  | void close()                   | 关闭数据报套接字       |
  | void receive(DatagramPacket p) | 从此套接字接受数据报包 |

- 发送数据的步骤

  - 创建发送端的Socket对象(DatagramSocket)
  - 创建数据，并把数据打包
  - 调用DatagramSocket对象的方法发送数据
  - 关闭发送端





  ### UDP接收数据【应用】

  - 接收数据的步骤

    - 创建接收端的Socket对象(DatagramSocket)
    - 创建一个数据包，用于接收数据
    - 调用DatagramSocket对象的方法接收数据
    - 解析数据包，并把数据在控制台显示
    - 关闭接收端

  - 构造方法

    | 方法名                              | 说明                                            |
    | ----------------------------------- | ----------------------------------------------- |
    | DatagramPacket(byte[] buf, int len) | 创建一个DatagramPacket用于接收长度为len的数据包 |

  - 相关方法

    | 方法名            | 说明                                     |
    | ----------------- | ---------------------------------------- |
    | byte[]  getData() | 返回数据缓冲区                           |
    | int  getLength()  | 返回要发送的数据的长度或接收的数据的长度 |




    ### UDP三种通讯方式【理解】

    + 单播

      单播用于两个主机之间的端对端通信

    + 组播

      组播用于对一组特定的主机进行通信

    + 广播

      广播用于一个主机对整个局域网上所有主机上的数据通信

    ### 2.5UDP组播实现【理解】

    + 实现步骤

      + 发送端
        1. 创建发送端的Socket对象(DatagramSocket)
        2. 创建数据，并把数据打包(DatagramPacket)
        3. 调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)
        4. 释放资源
      + 接收端
        1. 创建接收端Socket对象(MulticastSocket)
        2. 创建一个箱子,用于接收数据
        3. 把当前计算机绑定一个组播地址
        4. 将数据接收到箱子中
        5. 解析数据包,并打印数据
        6. 释放资源


- Java中的TCP通信

  - Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。
  - Java为客户端提供了Socket类，为服务器端提供了ServerSocket类

- 构造方法

  | 方法名                               | 说明                                           |
  | ------------------------------------ | ---------------------------------------------- |
  | Socket(InetAddress address,int port) | 创建流套接字并将其连接到指定IP指定端口号       |
  | Socket(String host, int port)        | 创建流套接字并将其连接到指定主机上的指定端口号 |

- 相关方法

  | 方法名                         | 说明                 |
  | ------------------------------ | -------------------- |
  | InputStream  getInputStream()  | 返回此套接字的输入流 |
  | OutputStream getOutputStream() | 返回此套接字的输出流 |


### TCP接收数据【应用】

- 构造方法

  | 方法名                  | 说明                             |
  | ----------------------- | -------------------------------- |
  | ServletSocket(int port) | 创建绑定到指定端口的服务器套接字 |

- 相关方法

  | 方法名          | 说明                           |
  | --------------- | ------------------------------ |
  | Socket accept() | 监听要连接到此的套接字并接受它 |

- 注意事项

  1. accept方法是阻塞的,作用就是等待客户端连接
  2. 客户端创建对象并连接服务器,此时是通过三次握手协议,保证跟服务器之间的连接
  3. 针对客户端来讲,是往外写的,所以是输出流
     针对服务器来讲,是往里读的,所以是输入流
  4. read方法也是阻塞的
  5. 客户端在关流的时候,还多了一个往服务器写结束标记的动作
  6. 最后一步断开连接,通过四次挥手协议保证连接终止