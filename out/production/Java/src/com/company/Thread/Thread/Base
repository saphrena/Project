请描述创建线程的三种方式。

   第一种方式是将类声明为 Thread 的子类。
1.    定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。
2.    创建Thread子类的实例，即创建了线程对象。
3.    调用线程对象的start()方法来启动该线程。

   第二种方式是声明一个类实现Runnable 接口。
1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。
2. 创建Runnable实现类的实例，并以此实例作为Thread的目标来创建Thread对象，Thread对象才是真正的线程对象。
3. 调用线程对象的start()方法来启动线程

  第三种方式是声明一个类实现Callable接口
1. 定义一个类实现Callable接口,并重写call()方法,该call()方法的方法体同样是该线程的线程执行体。
2. 创建Callable实现类的实例，创建Future的实现类FutureTask对象，把MyCallable对象作为构造方法的参数
3. 创建Thread类的对象，把FutureTask对象作为构造方法的参数
4. 调用线程对象的start()方法来启动线程,再调用get方法，就可以获取线程结束之后的结果。



三种多线程实现方式的对比

+ 实现Runnable、Callable接口
  + 好处: 扩展性强，实现该接口的同时还可以继承其他的类
  + 缺点: 编程相对复杂，不能直接使用Thread类中的方法
+ 继承Thread类
  + 好处: 编程比较简单，可以直接使用Thread类中的方法
  + 缺点: 可以扩展性较差，不能再继承其他的类



### 设置和获取线程名称【应用】

- 方法介绍

  | 方法名                     | 说明                               |
  | -------------------------- | ---------------------------------- |
  | void  setName(String name) | 将此线程的名称更改为等于参数name   |
  | String  getName()          | 返回此线程的名称                   |
  | Thread  currentThread()    | 返回对当前正在执行的线程对象的引用 |



  ### 线程休眠【应用】
  + 相关方法
    | 方法名                         | 说明                                             |
    | ------------------------------ | ------------------------------------------------ |
    | static void sleep(long millis) | 使当前正在执行的线程停留（暂停执行）指定的毫秒数 |



    优先级相关方法

    | 方法名                                  | 说明                                                         |
    | --------------------------------------- | ------------------------------------------------------------ |
    | final int getPriority()                 | 返回此线程的优先级                                           |
    | final void setPriority(int newPriority) | 更改此线程的优先级线程默认优先级是5；线程优先级的范围是：1-10 |





    使用实现接口的方式创建多线程
    实现接口的方式创建多线程实现步骤:
            1.创建一个Runnable接口的实现类.。
            2.在实现类中重写Runnable接口的run方法,设置线程任务。
            3.创建一个Runnable接口的实现类对象。
            4.创建Thread类对象,构造方法中传递Runnable接口的实现类对象。
            5.调用Thread类中的start方法,开启新的线程执行run方法。
    代码为：Thread t = new Thread(new MyRunnale());
    t.start();



    使用继承类的方式创建多线程
    继承类的方式创建多线程实现步骤:
    1.创建一个Thread类的子类。
    2.在Thread类的子类中重写Thread类中的run方法,设置线程任务。
    3.创建Thread类的子类对象。
    4.调用Thread类中的方法start方法,开启新的线程,执行run方法。
    代码为：MyThread mt = new MyThread();
    mt.start();



    请描述实现Runnable接口比继承Thread类所具有的优势：

    1. 适合多个相同的程序代码的线程去共享同一个资源。
    2. 可以避免java中的单继承的局限性。
    3. 增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和数据独立。
    4. 线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类。